<section id="contact" class="max-w-4xl mx-auto p-6">
  <h2 class="text-2xl font-bold">Contact Us</h2>
  
  <!-- Success Message (hidden by default) -->
  <div id="success-message" class="hidden mt-4 p-4 bg-green-100 border border-green-400 text-green-700 rounded">
    <p class="font-medium">Thank you for your message! We'll get back to you as soon as possible.</p>
  </div>

  <!-- Error Message (hidden by default) -->
  <div id="error-message" class="hidden mt-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded">
    <p class="font-medium">Something went wrong. Please try again or contact us directly.</p>
  </div>

  <!--
    Netlify's form detection requires the <form> to be present in the
    generated static HTML. Avoid wrapping this form in any conditional
    rendering that might remove it during build, otherwise Netlify won't
    recognize it.
  -->
  <form id="contact-form" name="track-attack-running-contact-us" method="POST" data-netlify="true" netlify-honeypot="bot-field" class="mt-4 grid gap-4">
      <input type="hidden" name="form-name" value="track-attack-running-contact-us">
    <p class="hidden">
      <label>Don't fill this out if you're human: <input name="bot-field" /></label>
    </p>
    <input type="text" name="name" id="name" placeholder="Name" required class="border p-2 rounded">
    <input type="email" name="email" id="email" placeholder="Email" required class="border p-2 rounded">
    <textarea name="message" id="message" placeholder="Message" required class="border p-2 rounded"></textarea>
    <div data-netlify-recaptcha="true"></div>
      <button type="submit" id="submit-btn" class="px-4 py-2 bg-primary text-white rounded hover:bg-primary/90 transition-colors">
        <span id="submit-text">Send</span>
        <span id="submit-loading" class="hidden">Sending...</span>
      </button>
  </form>

  <script src="https://www.google.com/recaptcha/api.js" async defer></script>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('contact-form');
      const successMessage = document.getElementById('success-message');
      const errorMessage = document.getElementById('error-message');
      const submitBtn = document.getElementById('submit-btn');
      const submitText = document.getElementById('submit-text');
      const submitLoading = document.getElementById('submit-loading');

      // Hide messages initially
      function hideMessages() {
        successMessage.classList.add('hidden');
        errorMessage.classList.add('hidden');
      }

      // Show success message
      function showSuccess() {
        hideMessages();
        successMessage.classList.remove('hidden');
        successMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }

      // Show error message
      function showError(message = 'Something went wrong. Please try again or contact us directly.') {
        hideMessages();
        errorMessage.querySelector('p:last-child').textContent = message;
        errorMessage.classList.remove('hidden');
        errorMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }

      // Reset form
      function resetForm() {
        form.reset();
        // Reset reCAPTCHA
        if (typeof grecaptcha !== 'undefined') {
          grecaptcha.reset();
        }
      }

      // Set loading state
      function setLoading(loading) {
        if (loading) {
          submitBtn.disabled = true;
          submitText.classList.add('hidden');
          submitLoading.classList.remove('hidden');
        } else {
          submitBtn.disabled = false;
          submitText.classList.remove('hidden');
          submitLoading.classList.add('hidden');
        }
      }

      // Wait for reCAPTCHA to be ready
      function waitForRecaptcha() {
        return new Promise((resolve) => {
          if (typeof grecaptcha !== 'undefined' && grecaptcha.ready) {
            grecaptcha.ready(resolve);
          } else {
            // Fallback if grecaptcha.ready is not available
            const checkInterval = setInterval(() => {
              if (typeof grecaptcha !== 'undefined') {
                clearInterval(checkInterval);
                resolve();
              }
            }, 100);
          }
        });
      }

      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        setLoading(true);
        hideMessages();

        try {
          // Wait for reCAPTCHA to be ready
          await waitForRecaptcha();
          
          // Check if reCAPTCHA is completed
          if (typeof grecaptcha !== 'undefined') {
            const recaptchaResponse = grecaptcha.getResponse();
            if (!recaptchaResponse) {
              showError('Please complete the reCAPTCHA verification.');
              setLoading(false);
              return;
            }
          }

          // Get form data
          const formData = new FormData(form);
          
          // Submit to Netlify
          const response = await fetch('/', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams(formData).toString(),
          });

          if (response.ok) {
            showSuccess();
            resetForm();
          } else {
            showError('Failed to submit form. Please try again.');
          }
        } catch (error) {
          console.error('Form submission error:', error);
          showError('Network error. Please check your connection and try again.');
        } finally {
          setLoading(false);
        }
      });

      // Hide messages when user starts typing
      const formInputs = form.querySelectorAll('input, textarea');
      formInputs.forEach(input => {
        input.addEventListener('input', hideMessages);
      });
    });
  </script>
</section>
