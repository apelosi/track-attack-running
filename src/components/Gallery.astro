<section id="gallery" class="max-w-6xl mx-auto p-6">
  <h2 class="text-2xl font-bold text-center mb-8">Photo Gallery</h2>
  
  <div class="relative">
    <!-- Main Image Container -->
    <div class="relative overflow-hidden rounded-lg shadow-lg bg-gray-100">
      <img 
        id="current-image" 
        src="/tar-01.png" 
        alt="Track Attack Running photo" 
        class="w-full h-96 object-cover transition-opacity duration-300"
      />
      
      <!-- Navigation Arrows -->
      <button 
        id="prev-btn" 
        class="absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white text-gray-800 p-3 rounded-full shadow-lg transition-all duration-200 hover:scale-110"
        aria-label="Previous photo"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>
      
      <button 
        id="next-btn" 
        class="absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white text-gray-800 p-3 rounded-full shadow-lg transition-all duration-200 hover:scale-110"
        aria-label="Next photo"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>
      
      <!-- Image Counter -->
      <div class="absolute bottom-4 left-4 bg-black/60 text-white px-3 py-1 rounded-full text-sm">
        <span id="image-counter">1</span> / 50
      </div>
    </div>
    
    <!-- Thumbnail Navigation -->
    <div class="mt-6 flex justify-center">
      <div class="flex space-x-2 overflow-x-auto pb-2 max-w-full">
        <div id="thumbnail-container" class="flex space-x-2">
          <!-- Thumbnails will be populated by JavaScript -->
        </div>
      </div>
    </div>
    
    <!-- Pagination Dots -->
    <div class="mt-4 flex justify-center space-x-2">
      <div id="pagination-dots" class="flex space-x-2">
        <!-- Pagination dots will be populated by JavaScript -->
      </div>
    </div>
  </div>
</section>

<script>
  class PhotoGallery {
    constructor() {
      this.currentIndex = 0;
      this.totalImages = 50;
      this.images = [];
      
      // Initialize images array
      for (let i = 1; i <= this.totalImages; i++) {
        this.images.push(`/tar-${i.toString().padStart(2, '0')}.png`);
      }
      
      this.init();
    }
    
    init() {
      this.createThumbnails();
      this.createPaginationDots();
      this.bindEvents();
      this.updateDisplay();
    }
    
    createThumbnails() {
      const container = document.getElementById('thumbnail-container');
      container.innerHTML = '';
      
      this.images.forEach((src, index) => {
        const thumb = document.createElement('div');
        thumb.className = 'flex-shrink-0 cursor-pointer transition-opacity duration-200 hover:opacity-80';
        thumb.onclick = () => this.goToImage(index);
        
        const img = document.createElement('img');
        img.src = src;
        img.alt = `Track Attack Running photo ${index + 1}`;
        img.className = 'w-16 h-16 object-cover rounded border-2 border-transparent';
        
        thumb.appendChild(img);
        container.appendChild(thumb);
      });
    }
    
    createPaginationDots() {
      const container = document.getElementById('pagination-dots');
      container.innerHTML = '';
      
      // Show dots for every 5th image to avoid too many dots
      const dotInterval = Math.ceil(this.totalImages / 10);
      
      for (let i = 0; i < this.totalImages; i += dotInterval) {
        const dot = document.createElement('button');
        dot.className = 'w-3 h-3 rounded-full bg-gray-300 hover:bg-gray-400 transition-colors duration-200';
        dot.onclick = () => this.goToImage(i);
        container.appendChild(dot);
      }
    }
    
    bindEvents() {
      document.getElementById('prev-btn').onclick = () => this.previous();
      document.getElementById('next-btn').onclick = () => this.next();
      
      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') this.previous();
        if (e.key === 'ArrowRight') this.next();
      });
      
      // Auto-advance every 5 seconds (optional)
      // setInterval(() => this.next(), 5000);
    }
    
    goToImage(index) {
      this.currentIndex = Math.max(0, Math.min(index, this.totalImages - 1));
      this.updateDisplay();
    }
    
    previous() {
      this.currentIndex = this.currentIndex === 0 ? this.totalImages - 1 : this.currentIndex - 1;
      this.updateDisplay();
    }
    
    next() {
      this.currentIndex = this.currentIndex === this.totalImages - 1 ? 0 : this.currentIndex + 1;
      this.updateDisplay();
    }
    
    updateDisplay() {
      const currentImage = document.getElementById('current-image');
      const imageCounter = document.getElementById('image-counter');
      const thumbnails = document.querySelectorAll('#thumbnail-container img');
      const paginationDots = document.querySelectorAll('#pagination-dots button');
      
      // Update main image
      currentImage.src = this.images[this.currentIndex];
      currentImage.alt = `Track Attack Running photo ${this.currentIndex + 1}`;
      
      // Update counter
      imageCounter.textContent = this.currentIndex + 1;
      
      // Update thumbnail borders
      thumbnails.forEach((thumb, index) => {
        thumb.classList.toggle('border-primary', index === this.currentIndex);
      });
      
      // Update pagination dots
      const dotInterval = Math.ceil(this.totalImages / 10);
      paginationDots.forEach((dot, index) => {
        const dotIndex = index * dotInterval;
        dot.classList.toggle('bg-primary', dotIndex === this.currentIndex);
        dot.classList.toggle('bg-gray-300', dotIndex !== this.currentIndex);
      });
      
      // Smooth scroll thumbnail into view
      const currentThumb = thumbnails[this.currentIndex];
      if (currentThumb) {
        currentThumb.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' });
      }
    }
  }
  
  // Initialize gallery when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new PhotoGallery();
  });
</script>
